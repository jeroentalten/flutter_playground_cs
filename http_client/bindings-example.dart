// ignore_for_file: always_specify_types
// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Bindings for `src/flutter_playground_cpp.h`.
///
/// Regenerate bindings with `dart run ffigen --config ffigen.yaml`.
///
class FlutterPlaygroundCppBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
  _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  FlutterPlaygroundCppBindings(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  FlutterPlaygroundCppBindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      lookup)
      : _lookup = lookup;

  ffi.Pointer<ffi.Char> send_message(
      ffi.Pointer<ffi.Char> username,
      ffi.Pointer<ffi.Char> message,
      ffi.Pointer<ffi.Char> encodedImage,
      ) {
    return _send_message(
      username,
      message,
      encodedImage,
    );
  }

  late final _send_messagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('send_message');
  late final _send_message = _send_messagePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> get_messages() {
    return _get_messages();
  }

  late final _get_messagesPtr =
  _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
      'get_messages');
  late final _get_messages =
  _get_messagesPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();
}
